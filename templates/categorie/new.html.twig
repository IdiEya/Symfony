{% if not app.request.xmlhttprequest %}
    {% extends 'base.html.twig' %}
{% endif %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .custom-card {
            max-width: 600px;
            margin: 2rem auto;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
        }

        .btn-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 2rem;
        }

        .error-message {
            color: red;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        .is-invalid {
            border-color: red;
        }
    </style>
{% endblock %}

{% block body %}
<div class="container py-5">
    <div class="card-body">
        {{ form_start(form, {
            'attr': {
                'action': path('app_categorie_new'),
                'id': 'categorieForm',
                'novalidate': 'novalidate'
            }
        }) }}

        <div class="mb-3">
            {{ form_label(form.nom, 'Nom de la catégorie', {'label_attr': {'class': 'form-label'}}) }}
            {{ form_widget(form.nom, {
                'attr': {
                    'class': 'form-control' ~ (form.nom.vars.errors|length > 0 ? ' is-invalid' : '')
                }
            }) }}

            {% if form.nom.vars.errors|length > 0 %}
                {% for error in form.nom.vars.errors %}
                    <div class="error-message">{{ error.message }}</div>
                {% endfor %}
            {% endif %}
        </div>

        <div class="btn-actions">
            <a href="{{ path('app_categorie_index') }}" class="btn btn-outline-secondary" style="background-color:rgb(195, 177, 229);">
                <i class="fas fa-arrow-left me-2"></i>Retour à la liste
            </a>

            <button type="submit" class="btn btn-primary" style="background-color:rgb(195, 177, 229);">
                <i class="fas fa-save me-2"></i>Enregistrer
            </button>
        </div>

        {{ form_end(form) }}
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const handleFormSubmit = async (e) => {
        e.preventDefault();
        const form = e.target;
        const formData = new FormData(form);

        const inputNom = form.querySelector('[name="categorie[nom]"]');
        inputNom.classList.remove('is-invalid');

        if (!formData.get('categorie[nom]').trim()) {
            inputNom.classList.add('is-invalid');
            if (!document.querySelector('.error-message')) {
                const errorDiv = document.createElement('div');
                errorDiv.className = 'error-message';
                errorDiv.innerText = 'Le nom de la catégorie est requis.';
                inputNom.parentElement.appendChild(errorDiv);
            }
            return;
        }

        try {
            const response = await fetch(form.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });

            if (response.ok) {
                const result = await response.text();

                try {
                    const jsonData = JSON.parse(result);
                    if (jsonData.success) {
                        window.location.reload();
                        $('#newCategorieModal').modal('hide');
                    }
                } catch {
                    document.querySelector('#newCategorieModal .modal-body').innerHTML = result;
                    const newForm = document.getElementById('categorieForm');
                    if (newForm) newForm.addEventListener('submit', handleFormSubmit);
                }
            }
        } catch (error) {
            console.error('Erreur:', error);
        }
    };

    const form = document.getElementById('categorieForm');
    if (form) {
        form.addEventListener('submit', handleFormSubmit);

        const inputNom = form.querySelector('[name="categorie[nom]"]');
        inputNom.addEventListener('input', () => {
            inputNom.classList.remove('is-invalid');
            const errorMessage = inputNom.parentElement.querySelector('.error-message');
            if (errorMessage) errorMessage.remove();
        });
    }
});
</script>
{% endblock %}
