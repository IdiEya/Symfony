

{% block body %}
    {{ form_start(form, { 
        'action': path('categorie_modal_edit', {'id': categorie.id}),
        'attr': {'id': 'editForm', 'class': 'ajax-form', 'novalidate': 'novalidate'} 
    }) }}
        <div class="mb-3">
            {{ form_label(form.nom, 'Nom', {'label_attr': {'class': 'form-label'}}) }}
            
            {{ form_widget(form.nom, {
                'attr': {
                    'class': 'form-control' ~ (form.nom.vars.errors|length > 0 ? ' is-invalid' : '')
                }
            }) }}
            
            <!-- Affichage des erreurs de validation -->
            {% if form.nom.vars.errors|length > 0 %}
                {% for error in form.nom.vars.errors %}
                    <div class="error-message">{{ error.message }}</div>
                {% endfor %}
            {% endif %}
        </div>

        <div class="d-flex justify-content-between mt-4">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" style="background-color:rgb(195, 177, 229);">
                <i class="fas fa-arrow-left me-2"></i>Annuler
            </button>
            <button type="submit" class="btn btn-primary" style="background-color:rgb(195, 177, 229);">
                <i class="fas fa-save me-2"></i>Enregistrer
            </button>
        </div>
    {{ form_end(form) }}
{% endblock %}

{% block javascripts %}
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const handleFormSubmit = async (e) => {
            e.preventDefault();
            const form = e.target;
            const formData = new FormData(form);

            const inputNom = form.querySelector('[name="categorie[nom]"]');
            inputNom.classList.remove('is-invalid');

            if (!formData.get('categorie[nom]').trim()) {
                inputNom.classList.add('is-invalid');
                if (!document.querySelector('.error-message')) {
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'error-message';
                    errorDiv.innerText = 'Le nom de la catÃ©gorie est requis.';
                    inputNom.parentElement.appendChild(errorDiv);
                }
                return;
            }

            try {
                const response = await fetch(form.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                if (response.ok) {
                    const result = await response.text();

                    try {
                        const jsonData = JSON.parse(result);
                        if (jsonData.success) {
                            window.location.reload();
                            $('#editCategorieModal').modal('hide');
                        }
                    } catch {
                        document.querySelector('#editCategorieModal .modal-body').innerHTML = result;
                        const newForm = document.getElementById('categorieForm');
                        if (newForm) newForm.addEventListener('submit', handleFormSubmit);
                    }
                }
            } catch (error) {
                console.error('Erreur:', error);
            }
        };

        const form = document.getElementById('categorieForm');
        if (form) {
            form.addEventListener('submit', handleFormSubmit);

            const inputNom = form.querySelector('[name="categorie[nom]"]');
            inputNom.addEventListener('input', () => {
                inputNom.classList.remove('is-invalid');
                const errorMessage = inputNom.parentElement.querySelector('.error-message');
                if (errorMessage) errorMessage.remove();
            });
        }
    });
    </script>
{% endblock %}
